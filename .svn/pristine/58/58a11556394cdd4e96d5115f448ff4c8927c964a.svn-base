using Quartz;
using System;
using System.Collections.Generic;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;

namespace TKBase.Framework.Scheduler
{
    public class JobListener : IJobListener
    {
        public string Name => "JobListener";
        private ILogger<JobListener> logger { get; set; }

        public JobListener()
        {
            LoggerFactory factory = new LoggerFactory();
            factory.AddFile(LogLevel.Debug);
            logger = factory.CreateLogger<JobListener>();
        }

        /**
         * (2)
         * 这个方法正常情况下不执行,但是如果当TriggerListener中的vetoJobExecution方法返回true时,那么执行这个方法.
         * 需要注意的是 如果方法(2)执行 那么(1),(3)这个俩个方法不会执行,因为任务被终止了嘛.
         * Called by the Scheduler when a JobDetail was about to be executed (an associated Trigger has occurred),
         * but a TriggerListener vetoed it's execution.
         */
        public async Task JobExecutionVetoed(IJobExecutionContext context, CancellationToken cancellationToken = default)
        {
            string msg= string.Format("任务开始执行之前调用,开始时间:{0}", DateTime.Now);
            logger.LogWarning(msg);
            await Console.Out.WriteLineAsync(msg);
        }

        /// <summary>
        /// 任务执行之前执行
        /// </summary>
        /// <param name="context"></param>
        /// <param name="cancellationToken"></param>
        /// <returns></returns>
        public async Task JobToBeExecuted(IJobExecutionContext context, CancellationToken cancellationToken = default)
        {
            string msg = string.Format("“{0}”每次执行之前调用,开始时间:{1}", context.JobDetail.Key.Name, DateTime.Now);
            logger.LogWarning(msg);
            await Console.Out.WriteLineAsync(msg);
        }

        /// <summary>
        /// job执行结束之后调用
        /// </summary>
        /// <param name="context"></param>
        /// <param name="jobException"></param>
        /// <param name="cancellationToken"></param>
        /// <returns></returns>
        public async Task JobWasExecuted(IJobExecutionContext context, JobExecutionException jobException, CancellationToken cancellationToken = default)
        {
            string msg = string.Format("“{0}”执行结束之后调用,结束时间:{1}", context.JobDetail.Key.Name, DateTime.Now);
            logger.LogWarning(msg);
            await Console.Out.WriteLineAsync(msg);
        }
    }
}
